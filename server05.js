// let counter = 0;
// console.log(counter);


// node.js это платформа каторая понимает язык JavaScript
// браузер это тоже платформа каторая понимает язык JavaScript только с другой задачей у браузера на JavaScript прграма называется
// Single Page Application Front-end а программы для node.js называются Back-end
// программа написаная для node.js не запуститься в браузере
// что бы запустить программу с помощью node.js в терминале прописываем node и файл каторый надо запустить node server.js 
// програма отработала выдала 0 и умерла

// есл в рпограмме инициируем асинхронный процесс каторый выполняется регулярно и пока он не остановится программа будет работать
// самый прстой пример setInterval

// setInterval(() => {
//     counter++;
//     console.log(counter);
// }, 1000)

// нам надо написать Back-end програму сервер
// сервер это мощный комп каторый подключен всегда к сети и на нем что бы он свои функции мог выполнять должна быть программа сервера
// у нас будет HTTP сервер
// задача HTTP сервера слушать HTTP протокол получая на него реквесты от какова либа компа либо фронтенда или бекенда
// принимать эти реквесты на основе этих реквестов возврощать какие то респонсы

// HTTP протокол один дорого одна но программ каторые хотят слшать HTTP протокол их много на серваке
// если это домашний комп то эо всякие телеграмы торренты скайпы браузеры и прочее
// что бы тому кто отправляет запрос достучаться до нашей программы надо указать конкретный порт
// будем указывать 3003 порт
// напишем программу каторая будет слушать HTTP протокол

// node.js это большая платформа каторая представляет много различных функциональностей

const http = require('http'); // подключаем в этот файлик готовй объект http

let requestsCounter = 0;
const server = http.createServer((request, response) => { // создаем сервер createServer и передаем его впеременную server
    // что бы сервер реагировал на каждый request и эта реакция происходит с помощью колбек функции каторая передается в createServer
    // модуль http наш сервер будет ее вызыать каждый раз когда будет плучать какой то request
    // request то что пришло
    // response то что должны ответить
    requestsCounter++;

    switch (request.url) { // у request есть своойство url
        case '/students' :
            response.write('STUDENTS')
            break;
        case '/' : // проваливание из кейса case '/' главная страница в кейс case '/courses' 
        case '/courses' :
            response.write('FRONT + BACK')
            break;
        default: 
            response.write('404 not found')
    }

    response.write(' IT-KAMASUTRA: ' + requestsCounter); // записываем write в response IT-KAMASUTRA
    response.end(); // завершаем request
});

server.listen(3003) // server будет слушать HTTP протокол конкретный порт 3003 и эитм стартуется программа 
// после запуска программы просто моргает курсор в терминале и все 
// надо отправить HTTP запрос с браузера на наш сервак на 3003 порт
// так как браузер находится на том же самом ноуте что и сервер над достучаться к самому себе для этого используется localhost
// указываем порт http://localhost:3003

// ответ всегда одинаковый только увеличивается requestsCounter потому что один обработчик одна функция колбека в каторый вся логика 
// бекенда просто записывать результат IT-KAMASUTRA' + requestsCounter в response никак не зависищий от URL